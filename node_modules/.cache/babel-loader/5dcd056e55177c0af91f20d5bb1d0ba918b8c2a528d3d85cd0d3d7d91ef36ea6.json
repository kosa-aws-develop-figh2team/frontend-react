{"ast":null,"code":"var _jsxFileName = \"/Users/soyeon/\\u1100\\u116F\\u11AB\\u1109\\u1169\\u110B\\u1167\\u11AB_\\u1109\\u1173\\u110F\\u1175\\u11AF\\u1107\\u1175\\u11AF\\u1103\\u1165/frontend-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n//헤더\nimport Header from \"./components/Header\";\n\n// 챗봇\nimport ChatMessages from \"./components/ChatMessages\";\nimport ChatForm from \"./components/ChatForm\";\nimport \"./styles/chatbot.css\";\n\n// 정책 비교\nimport PolicySearch from \"./components/PolicySearch\";\nimport PolicyCompare from \"./components/PolicyCompare\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    role: \"model\",\n    text: \"안녕하세요! 무엇을 도와드릴까요?\"\n  }]);\n  const handleSend = async text => {\n    if (!text.trim()) return;\n\n    // 예시: 세션 ID는 별도로 관리하거나 생성해야 합니다.\n    const sessionId = \"your-session-id\";\n    setMessages([...messages, {\n      role: \"user\",\n      text\n    }]);\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL2}/chat/question`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          question_text: text,\n          session_id: sessionId\n        })\n      });\n      const data = await response.json();\n      setMessages(prev => [...prev, {\n        role: \"model\",\n        text: data.response_text,\n        // AI의 응답\n        messageId: data.message_id,\n        serviceIds: data.service_ids\n      }]);\n    } catch (error) {\n      console.error(\"AI 응답 중 오류 발생:\", error);\n      setMessages(prev => [...prev, {\n        role: \"model\",\n        text: \"AI 응답 중 오류가 발생했습니다.\"\n      }]);\n    }\n  };\n  const [policies, setPolicies] = useState([]);\n  const [selected, setSelected] = useState([]);\n\n  // 서버에서 정책 데이터 불러오기\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_SERVER_URL}/items`).then(res => res.json()).then(data => {\n      // 서버에서 받아온 정책 데이터에 고유 id 추가\n      console.log(data);\n      const policiesWithId = data.map(policy => ({\n        ...policy,\n        id: policy.service_id // service_id를 id로 사용\n      }));\n      setPolicies(policiesWithId);\n    }).catch(err => {\n      console.error('정책 데이터를 불러오는 중 오류 발생:', err);\n    });\n  }, []);\n  const toggleSelect = id => {\n    setSelected(prevSelected => prevSelected.includes(id) ? prevSelected.filter(item => item !== id) : [...prevSelected, id]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: \"#F6F2FF\",\n      minHeight: \"100vh\",\n      margin: 0,\n      padding: 0,\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"service-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-popup\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-body\",\n            children: /*#__PURE__*/_jsxDEV(ChatMessages, {\n              messages: messages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-footer\",\n            children: /*#__PURE__*/_jsxDEV(ChatForm, {\n              onSend: handleSend\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-container\",\n        children: /*#__PURE__*/_jsxDEV(PolicySearch, {\n          policies: policies,\n          selected: selected,\n          toggleSelect: toggleSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-container\",\n        children: /*#__PURE__*/_jsxDEV(PolicyCompare, {\n          policies: policies.filter(p => selected.includes(p.id)),\n          onClose: () => setSelected([])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zV4KKcVAqFo+GJyN1q0NG2QjQdY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","ChatMessages","ChatForm","PolicySearch","PolicyCompare","jsxDEV","_jsxDEV","App","_s","messages","setMessages","role","text","handleSend","trim","sessionId","response","fetch","process","env","REACT_APP_SERVER_URL2","method","headers","body","JSON","stringify","question_text","session_id","data","json","prev","response_text","messageId","message_id","serviceIds","service_ids","error","console","policies","setPolicies","selected","setSelected","REACT_APP_SERVER_URL","then","res","log","policiesWithId","map","policy","id","service_id","catch","err","toggleSelect","prevSelected","includes","filter","item","style","background","minHeight","margin","padding","width","height","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSend","p","onClose","_c","$RefreshReg$"],"sources":["/Users/soyeon/권소연_스킬빌더/frontend-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n//헤더\nimport Header from \"./components/Header\";\n\n// 챗봇\nimport ChatMessages from \"./components/ChatMessages\";\nimport ChatForm from \"./components/ChatForm\";\nimport \"./styles/chatbot.css\";\n\n// 정책 비교\nimport PolicySearch from \"./components/PolicySearch\";\nimport PolicyCompare from \"./components/PolicyCompare\";\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    { role: \"model\", text: \"안녕하세요! 무엇을 도와드릴까요?\" }\n  ]);\n\n  const handleSend = async (text) => {\n    if (!text.trim()) return;\n  \n    // 예시: 세션 ID는 별도로 관리하거나 생성해야 합니다.\n    const sessionId = \"your-session-id\"; \n  \n    setMessages([...messages, { role: \"user\", text }]);\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL2}/chat/question`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          question_text: text,\n          session_id: sessionId\n        })\n      });\n  \n      const data = await response.json();\n  \n      setMessages(prev => [\n        ...prev,\n        {\n          role: \"model\",\n          text: data.response_text, // AI의 응답\n          messageId: data.message_id,\n          serviceIds: data.service_ids\n        }\n      ]);\n    } catch (error) {\n      console.error(\"AI 응답 중 오류 발생:\", error);\n      setMessages(prev => [\n        ...prev,\n        { role: \"model\", text: \"AI 응답 중 오류가 발생했습니다.\" }\n      ]);\n    }\n  }; \n\n  const [policies, setPolicies] = useState([]);\n  const [selected, setSelected] = useState([]);\n\n  // 서버에서 정책 데이터 불러오기\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_SERVER_URL}/items`)\n      .then(res => res.json())\n      .then(data => {\n        // 서버에서 받아온 정책 데이터에 고유 id 추가\n        console.log(data);\n        const policiesWithId = data.map(policy => ({\n          ...policy,\n          id: policy.service_id // service_id를 id로 사용\n        }));\n        setPolicies(policiesWithId);\n      })\n      .catch(err => {\n        console.error('정책 데이터를 불러오는 중 오류 발생:', err);\n      });\n  }, []);\n\n  const toggleSelect = (id) => {\n    setSelected((prevSelected) =>\n      prevSelected.includes(id)\n        ? prevSelected.filter((item) => item !== id)\n        : [...prevSelected, id]\n    );\n  };\n\n  return (\n    <div style={{ background: \"#F6F2FF\", minHeight: \"100vh\", margin:0, padding: 0,\n      width: \"100%\",\n      height: \"100%\", }}>\n      <Header/>\n\n      <div className=\"service-content\">\n        {/* 1. 챗봇 */}\n        <div className=\"section-container\">\n          <div className=\"chatbot-popup\">\n            <div className=\"chat-body\">\n              <ChatMessages messages={messages} />\n            </div>\n            <div className=\"chat-footer\">\n              <ChatForm onSend={handleSend} />\n            </div>\n          </div>\n        </div>\n\n        {/* 2. 정책 리스트 */}\n        <div className=\"section-container\">\n          <PolicySearch\n            policies={policies}\n            selected={selected}\n            toggleSelect={toggleSelect}\n          />\n        </div>\n\n        {/* 3. 정책 비교 */}\n        <div className=\"section-container\">\n          <PolicyCompare\n            policies={policies.filter((p) => selected.includes(p.id))}\n            onClose={() => setSelected([])}\n          />\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}