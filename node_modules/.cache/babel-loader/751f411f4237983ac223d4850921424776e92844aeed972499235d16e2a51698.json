{"ast":null,"code":"var _jsxFileName = \"/Users/soyeon/\\u1100\\u116F\\u11AB\\u1109\\u1169\\u110B\\u1167\\u11AB_\\u1109\\u1173\\u110F\\u1175\\u11AF\\u1107\\u1175\\u11AF\\u1103\\u1165/frontend-react/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [text, setText] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [displayedText, setDisplayedText] = useState('');\n//   const [displayedAuthor, setDisplayedAuthor] = useState('');\n\n//   useEffect(() => {\n//     fetch(`${process.env.REACT_APP_SERVER_URL}/api/text`)\n//       .then(res => res.json())\n//       .then(data => {\n//         let text = data.text.split(\"by\")[0]\n//         let author = data.text.split(\"by\")[1]\n//         setDisplayedText(text);\n//         setDisplayedAuthor(author)\n//       });\n//   }, []);\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     fetch(`${process.env.REACT_APP_SERVER_URL}/api/text`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ text, username }),\n//     });\n//     setText('');\n//     setUsername('');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>확신없는 랜덤 명언</h1>\n//       <h2>{displayedText ? displayedText : \"아직 저장된 명언이 없거나 서버와 연결되지 않았습니다.\"}</h2>\n//       <h2>by {displayedAuthor}</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter text\"\n//           value={text}\n//           onChange={e => setText(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter username\"\n//           value={username}\n//           onChange={e => setUsername(e.target.value)}\n//         />\n//         <button type=\"submit\">명언 저장</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import ChatHeader from \"./components/ChatHeader\";\n// import ChatMessages from \"./components/ChatMessages\";\n// import ChatForm from \"./components/ChatForm\";\n// import \"./styles/chatbot.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { role: \"model\", text: \"안녕하세요! 무엇을 도와드릴까요?\" }\n//   ]);\n\n//   const handleSend = (text) => {\n//     if (!text.trim()) return;\n//     setMessages([...messages, { role: \"user\", text }]);\n//     // 실제 서비스에서는 여기서 API 호출 후 응답 추가\n//     setTimeout(() => {\n//       setMessages((prev) => [\n//         ...prev,\n//         { role: \"model\", text: `\"${text}\"에 대한 답변입니다.` }\n//       ]);\n//     }, 600);\n//   };\n\n//   return (\n//     <div className=\"chatbot-popup\">\n//       <ChatHeader />\n//       <div className=\"chat-body\">\n//         <ChatMessages messages={messages} />\n//       </div>\n//       <div className=\"chat-footer\">\n//         <ChatForm onSend={handleSend} />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport SplitScreen from './SplitScreen';\nimport Chatbot from './components/Chatbot';\nimport PolicyCompare from './components/PolicyCompare';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [comparedPolicies, setComparedPolicies] = useState([]);\n\n  // 정책 비교 요청 핸들러\n  const handleCompareRequest = districts => {\n    // API 호출 대신 임시 데이터 사용 (실제 프로젝트에서는 API 연동)\n    const mockData = [{\n      district: '강남구',\n      정책명: '신생아 지원금',\n      금액: '월 50만원',\n      대상: '출생 후 36개월 미만',\n      신청방법: '온라인 접수'\n    }, {\n      district: '종로구',\n      정책명: '첫아이 지원',\n      금액: '일시금 200만원',\n      대상: '출생 후 12개월 미만',\n      신청방법: '구청 방문'\n    }];\n    setComparedPolicies(mockData);\n  };\n  return /*#__PURE__*/_jsxDEV(SplitScreen, {\n    leftWidth: 1,\n    rightWidth: 1.2,\n    children: [/*#__PURE__*/_jsxDEV(Chatbot, {\n      messages: messages,\n      onSend: setMessages,\n      onCompare: handleCompareRequest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PolicyCompare, {\n      data: comparedPolicies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DdYLgWgEM/W0LJMmnqAgV51S5GA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SplitScreen","Chatbot","PolicyCompare","jsxDEV","_jsxDEV","App","_s","messages","setMessages","comparedPolicies","setComparedPolicies","handleCompareRequest","districts","mockData","district","정책명","금액","대상","신청방법","leftWidth","rightWidth","children","onSend","onCompare","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/Users/soyeon/권소연_스킬빌더/frontend-react/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [text, setText] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [displayedText, setDisplayedText] = useState('');\n//   const [displayedAuthor, setDisplayedAuthor] = useState('');\n\n//   useEffect(() => {\n//     fetch(`${process.env.REACT_APP_SERVER_URL}/api/text`)\n//       .then(res => res.json())\n//       .then(data => {\n//         let text = data.text.split(\"by\")[0]\n//         let author = data.text.split(\"by\")[1]\n//         setDisplayedText(text);\n//         setDisplayedAuthor(author)\n//       });\n//   }, []);\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     fetch(`${process.env.REACT_APP_SERVER_URL}/api/text`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ text, username }),\n//     });\n//     setText('');\n//     setUsername('');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>확신없는 랜덤 명언</h1>\n//       <h2>{displayedText ? displayedText : \"아직 저장된 명언이 없거나 서버와 연결되지 않았습니다.\"}</h2>\n//       <h2>by {displayedAuthor}</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter text\"\n//           value={text}\n//           onChange={e => setText(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter username\"\n//           value={username}\n//           onChange={e => setUsername(e.target.value)}\n//         />\n//         <button type=\"submit\">명언 저장</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import ChatHeader from \"./components/ChatHeader\";\n// import ChatMessages from \"./components/ChatMessages\";\n// import ChatForm from \"./components/ChatForm\";\n// import \"./styles/chatbot.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { role: \"model\", text: \"안녕하세요! 무엇을 도와드릴까요?\" }\n//   ]);\n\n//   const handleSend = (text) => {\n//     if (!text.trim()) return;\n//     setMessages([...messages, { role: \"user\", text }]);\n//     // 실제 서비스에서는 여기서 API 호출 후 응답 추가\n//     setTimeout(() => {\n//       setMessages((prev) => [\n//         ...prev,\n//         { role: \"model\", text: `\"${text}\"에 대한 답변입니다.` }\n//       ]);\n//     }, 600);\n//   };\n\n//   return (\n//     <div className=\"chatbot-popup\">\n//       <ChatHeader />\n//       <div className=\"chat-body\">\n//         <ChatMessages messages={messages} />\n//       </div>\n//       <div className=\"chat-footer\">\n//         <ChatForm onSend={handleSend} />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport SplitScreen from './SplitScreen';\nimport Chatbot from './components/Chatbot';\nimport PolicyCompare from './components/PolicyCompare';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [comparedPolicies, setComparedPolicies] = useState([]);\n\n  // 정책 비교 요청 핸들러\n  const handleCompareRequest = (districts) => {\n    // API 호출 대신 임시 데이터 사용 (실제 프로젝트에서는 API 연동)\n    const mockData = [\n      { \n        district: '강남구', \n        정책명: '신생아 지원금', \n        금액: '월 50만원', \n        대상: '출생 후 36개월 미만',\n        신청방법: '온라인 접수' \n      },\n      { \n        district: '종로구', \n        정책명: '첫아이 지원', \n        금액: '일시금 200만원', \n        대상: '출생 후 12개월 미만',\n        신청방법: '구청 방문' \n      }\n    ];\n    setComparedPolicies(mockData);\n  };\n\n  return (\n    <SplitScreen leftWidth={1} rightWidth={1.2}>\n      <Chatbot \n        messages={messages} \n        onSend={setMessages}\n        onCompare={handleCompareRequest} \n      />\n      <PolicyCompare data={comparedPolicies} />\n    </SplitScreen>\n  );\n}\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5D;EACA,MAAMY,oBAAoB,GAAIC,SAAS,IAAK;IAC1C;IACA,MAAMC,QAAQ,GAAG,CACf;MACEC,QAAQ,EAAE,KAAK;MACfC,GAAG,EAAE,SAAS;MACdC,EAAE,EAAE,QAAQ;MACZC,EAAE,EAAE,cAAc;MAClBC,IAAI,EAAE;IACR,CAAC,EACD;MACEJ,QAAQ,EAAE,KAAK;MACfC,GAAG,EAAE,QAAQ;MACbC,EAAE,EAAE,WAAW;MACfC,EAAE,EAAE,cAAc;MAClBC,IAAI,EAAE;IACR,CAAC,CACF;IACDR,mBAAmB,CAACG,QAAQ,CAAC;EAC/B,CAAC;EAED,oBACET,OAAA,CAACJ,WAAW;IAACmB,SAAS,EAAE,CAAE;IAACC,UAAU,EAAE,GAAI;IAAAC,QAAA,gBACzCjB,OAAA,CAACH,OAAO;MACNM,QAAQ,EAAEA,QAAS;MACnBe,MAAM,EAAEd,WAAY;MACpBe,SAAS,EAAEZ;IAAqB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACFvB,OAAA,CAACF,aAAa;MAAC0B,IAAI,EAAEnB;IAAiB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAElB;AAACrB,EAAA,CApCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}